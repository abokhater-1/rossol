name: Build Windows

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  windows:
    runs-on: windows-2025  # or windows-latest / windows-2022
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: List repo files
        shell: pwsh
        run: |
          Get-ChildItem -Recurse -File | Select-Object FullName

      - name: Install dependencies
        shell: pwsh
        run: |
          if (Test-Path package-lock.json) { npm ci } else { npm install }

      - name: Ensure data folder (optional, silences extraResources warning)
        shell: pwsh
        run: |
          if (-not (Test-Path data)) { New-Item -ItemType Directory data | Out-Null }

      - name: Ensure Windows icon
        shell: pwsh
        run: |
          if (-not (Test-Path build/icon.ico)) {
            echo "build/icon.ico not found; generating from a PNG logo..."
            npm i -D electron-icon-builder
            if (Test-Path render/assets/logo.png) {
              npx electron-icon-builder --input=render/assets/logo.png --output=build --flatten
              Copy-Item build/icons/icon.ico build/icon.ico -Force
            } elseif (Test-Path renderer/assets/logo.png) {
              npx electron-icon-builder --input=renderer/assets/logo.png --output=build --flatten
              Copy-Item build/icons/icon.ico build/icon.ico -Force
            } else {
              echo "##[error] Missing build/icon.ico and no logo at render/assets/ or renderer/assets/"
              exit 1
            }
          }

      # ---- Standard Windows builds (installer + portable), no publish ----
      - name: Build (installer + portable, no publish)
        run: npx electron-builder --win nsis portable -p never

      - name: Upload installer/portable
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            dist/*.exe
            dist/*.zip
            dist/*.blockmap
          if-no-files-found: warn

      # ---- UNPACKED build (no asar) so you get raw HTML/JS/CSS/JSON files ----
      - name: Build UNPACKED (no asar)
        run: npx electron-builder --win dir -c.asar=false -p never

      # Add a helper BAT to run in "portable" mode (data saved next to EXE)
      - name: Add run-portable.bat
        shell: pwsh
        run: |
          $bat = "@echo off`r`nset ROSSOL_PORTABLE=1`r`nstart "" ""%~dp0Rossol.exe""`r`n"
          Set-Content -Path dist/win-unpacked/run-portable.bat -Value $bat -Encoding ASCII

      # Zip the unpacked folder for easy download
      - name: Zip UNPACKED folder
        shell: pwsh
        run: |
          if (Test-Path dist/win-unpacked.zip) { Remove-Item dist/win-unpacked.zip -Force }
          Compress-Archive -Path dist/win-unpacked/* -DestinationPath dist/win-unpacked.zip

      - name: Upload UNPACKED (no asar)
        uses: actions/upload-artifact@v4
        with:
          name: windows-unpacked-no-asar
          path: dist/win-unpacked.zip
          if-no-files-found: error
